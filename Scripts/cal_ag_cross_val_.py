# -*- coding: utf-8 -*-
"""cal_ag_cross_val_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1QXlB4OtMjIJ5esvf91FaRf-159ZdjW

# **Monitoreo de la Calidad del Agua Mediante Algoritmos de Aprendizaje Automático**


(Agregar descripción)

# Validación de los datos

### K-Folds Cross Validatión

### Debemos instalar algunas dependencias para leer el archivo "xlsb" con el comando "!pip install pyxlsb"
(solo si es necesario)
"""

# instalar dependencias

!pip install pyxlsb

"""### Importamos las librerías"""

# librerias

import pandas as pd
import numpy as np

# modulos

from sklearn.tree import DecisionTreeRegressor

from sklearn.model_selection import (cross_val_score, KFold)
from sklearn.metrics import mean_squared_error

import warnings
warnings.filterwarnings("ignore")

"""### Creamos la conexión con Google

(Solo si es necesario)
"""

if __name__ == "__main__":

    # creamos la conexión con google

    from google.colab import drive
    drive.mount('/content/drive')    # nobre de la conexion

    # o subimos un archivo (si es necesario)

    # from google.colab import files
    # Uploaded = files.upload()

"""### Creamos una variable con el nuevo archivo"""

## leemos los archivos

    ### leemos el archivo y especificamos la hoja que usaremos como df
    ch_dbo_1 = pd.read_excel('/content/drive/MyDrive/UAM/Calidad del agua /ica_sup_1.xlsx')

    ## tratamiento de los valores atipicos y nulos

    ### eliminar los valores nulos
    ch_dbo_1_0 = ch_dbo_1.dropna()

    ### cambia los valores atipicos por 0
    ch_dbo_1_0_0 = ch_dbo_1_0.replace({'<30':30, '<3':3, '<2':2, '<10':10})
    ### tamaño de los datos
    print(ch_dbo_1.shape)
    print(ch_dbo_1_0.shape)
    # ### tipos de datos
    print(ch_dbo_1_0_0.dtypes)
    ### descripción del df
    print(ch_dbo_1_0_0.describe())
    ### eliminamos las columnas que no usaremos
    ch_dbo_1_0_1 = ch_dbo_1_0_0.drop('SITIO', axis = 1)
    print(ch_dbo_1_0_1)

"""## Cross Validation (K-Folds)"""

## preparamos los datos para cross validation

    ### eliminamos las columnas que no cecesitamos
    X = ch_dbo_1_0_1.drop(['SEMAFORO', 'NUM_SEMAFORO'], axis=1)
    ### columna que vamos a predecir
    y = ch_dbo_1_0_1['NUM_SEMAFORO']

    ## cross validation

    print('*'*64)
    model = DecisionTreeRegressor()
    ### Implementacion básica de Cross validation para calcular un score con MSE
    score = cross_val_score(model, X, y, cv = 3, scoring='neg_mean_squared_error')
    print('CROSS VALIDATION')
    print(np.abs(np.mean(score)))

## implementacion basica de cross validation

    ### Cada elemento del array score es el error medio cuadratico
    print('*'*64)
    print('IMPLEMENTACION BÁSICA')
    print('Los tres MSE fueron: ', score)
    print('='*32)
    print(np.mean(score))
    print('El MSE promedio fue: ', np.abs(np.mean(score)))

    ## implementacion de bajo nivel de cross validation

    print('*'*64)
    print('IMPLEMENTACION DE BAJO NIVEL')
    ### numero de pliegues
    print('='*32)
    print('Numero de pliegues: ')
    kf = KFold(n_splits = 3, shuffle = True, random_state = 42)
    ## ciclo for
    for train, test in kf.split(ch_dbo_1):
        print('entrenamiento: ', train)
        print('prueba: ', test)