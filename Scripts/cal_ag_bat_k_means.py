# -*- coding: utf-8 -*-
"""cal_ag_bat_k_means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZggUzg7CWlWpwPsJasG2B4tLaLPyjxg-

# **Monitoreo de la Calidad del Agua Mediante Algoritmos de Aprendizaje Automático**


(Agregar descripción)

### Debemos instalar algunas dependencias para leer el archivo "xlsb" con el comando "!pip install pyxlsb" 
(solo si es necesario)
"""

# instalar dependencias

!pip install pyxlsb

"""### Importamos las librerías"""

# librerias

import numpy as np
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
 
# modulos

from seaborn import palettes
from sklearn.cluster import MiniBatchKMeans 

import warnings 
warnings.filterwarnings("ignore")

"""### Creamos la conexión con Google

(Solo si es necesario)
"""

if __name__ == "__main__":

    # creamos la conexión con google

    from google.colab import drive
    drive.mount('/content/drive')    # nobre de la conexion

    # o subimos un archivo (si es necesario)

    # from google.colab import files
    # Uploaded = files.upload()

"""### Creamos una variable con el nuevo archivo"""

## leemos los archivos

    ### leemos el archivo y especificamos la hoja que usaremos como df
    ch_dbo_1 = pd.read_excel('/content/drive/MyDrive/UAM/Calidad del agua /ResChiapas (4).xlsb', sheet_name = '2012-2021')
    
    ## eliminamos las columnas innecesarias

    ch_dbo_1.drop(['Unnamed: 0','Unnamed: 1', 'CLAVE SITIO', 'CLAVE MONITOREO', 'NOMBRE DEL SITIO', 'TIPO DE CUERPO DE AGUA'], axis = 1, inplace = True)
    ch_dbo_1.dropna()
    ### leemos el df
    ch_dbo_1

## cambiar los valores nulos por 0

  ch_dbo_1_0 = ch_dbo_1.replace({'-85':0, '-8':0})

  ch_dbo_1_0_0 = ch_dbo_1.fillna(0)
             
  ch_dbo_1_0_0

"""## Análisis exploratorio de datos"""

# tamaño de los datos 

    ch_dbo_1.shape

# tipos de datos

    ch_dbo_1.dtypes

#  ## cambiamos el tipo de datos

#  ## método .astype
#  ch_dbo_1[::].astype('float64')
#  ch_dbo_1.dtypes

#  ch_dbo_1[::] = [float(str(i).replace('<', ''))for i in ch_dbo_1[::]]

# obtenemos la descripción de los datos

    ch_dbo_1.describe()

## batch k-means

  # al ser aprendizaje no supervisado, no separamos nuestro datasets en partes  
  # eliminaremos los nombres de los caramelos, ya que eso no nos sirve para el algoritmo 
  X = ch_dbo_1_0_0.drop('FECHA', axis=1)

  kmeans = MiniBatchKMeans(n_clusters = 6,batch_size = 8).fit(X) 
  
  print('Total de centros: ', len(kmeans.cluster_centers_)) 
  print('*'*64) 
  print(kmeans.predict(X)) 
    
  ch_dbo_1_0_0['group'] = kmeans.predict(X) 
      
  print(ch_dbo_1_0_0)